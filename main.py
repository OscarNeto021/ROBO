#!/usr/bin/env python3
"""
BTC Perpetual Elite Trader - Sistema Principal
Sistema de trading algor√≠tmico avan√ßado para Bitcoin perp√©tuo na Binance

Desenvolvido com base em pesquisa extensiva dos melhores traders e rob√¥s do mundo.
Otimizado para capital inicial de $200 mensais com estrat√©gias de elite.
"""

import asyncio
import logging
import signal
import sys
import os
from pathlib import Path
from typing import Dict, Any
import yaml
import argparse
from datetime import datetime

# Adicionar o diret√≥rio raiz ao path para permitir imports do pacote src
sys.path.insert(0, str(Path(__file__).resolve().parent))

from src.core.system_manager import SystemManager
from src.core.config_manager import ConfigManager
from src.core.logger import setup_logging
from src.api.dashboard_server import DashboardServer

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

class BTCPerpetualEliteTrader:
    """
    Sistema principal do BTC Perpetual Elite Trader
    
    Orquestra todos os componentes do sistema:
    - Estrat√©gias de trading avan√ßadas
    - Machine learning ensemble
    - Gest√£o de risco multidimensional
    - Dashboard em tempo real
    - APIs da Binance
    """
    
    def __init__(self, config_path: str = "config/config.yaml"):
        """
        Inicializa o sistema principal
        
        Args:
            config_path: Caminho para arquivo de configura√ß√£o
        """
        self.config_path = config_path
        self.config_manager = None
        self.system_manager = None
        self.dashboard_server = None
        self.running = False
        
        # Setup signal handlers para shutdown graceful
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
    async def initialize(self) -> bool:
        """
        Inicializa todos os componentes do sistema
        
        Returns:
            bool: True se inicializa√ß√£o bem-sucedida
        """
        try:
            logger.info("üöÄ Inicializando BTC Perpetual Elite Trader...")
            
            # 1. Carregar configura√ß√µes
            logger.info("üìã Carregando configura√ß√µes...")
            self.config_manager = ConfigManager(self.config_path)
            config = self.config_manager.get_config()
            
            # 2. Validar configura√ß√µes cr√≠ticas
            if not self._validate_config(config):
                logger.error("‚ùå Configura√ß√µes inv√°lidas!")
                return False
            
            # 3. Inicializar sistema principal
            logger.info("üîß Inicializando sistema principal...")
            self.system_manager = SystemManager(config)
            
            if not await self.system_manager.initialize():
                logger.error("‚ùå Falha na inicializa√ß√£o do sistema!")
                return False
            
            # 4. Inicializar dashboard
            if config.get('monitoring', {}).get('dashboard_enabled', True):
                logger.info("üìä Inicializando dashboard...")
                port = config.get('monitoring', {}).get('dashboard_port', 8080)
                self.dashboard_server = DashboardServer(
                    self.system_manager, 
                    port=port
                )
                await self.dashboard_server.start()
            
            # 5. Verificar conectividade
            logger.info("üåê Verificando conectividade...")
            if not await self.system_manager.test_connectivity():
                logger.warning("‚ö†Ô∏è Problemas de conectividade detectados!")
            
            logger.info("‚úÖ Sistema inicializado com sucesso!")
            self._print_startup_summary(config)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    async def run(self):
        """
        Loop principal do sistema
        """
        if not await self.initialize():
            logger.error("‚ùå Falha na inicializa√ß√£o. Encerrando...")
            return
        
        self.running = True
        logger.info("üéØ Sistema em execu√ß√£o! Pressione Ctrl+C para parar.")
        
        try:
            # Loop principal
            while self.running:
                # O SystemManager gerencia todas as opera√ß√µes
                await self.system_manager.run_cycle()
                
                # Pequena pausa para evitar uso excessivo de CPU
                await asyncio.sleep(0.1)
                
        except KeyboardInterrupt:
            logger.info("üõë Interrup√ß√£o do usu√°rio detectada...")
        except Exception as e:
            logger.error(f"‚ùå Erro no loop principal: {e}")
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """
        Shutdown graceful do sistema
        """
        logger.info("üõë Iniciando shutdown do sistema...")
        self.running = False
        
        try:
            # Parar dashboard
            if self.dashboard_server:
                logger.info("üìä Parando dashboard...")
                await self.dashboard_server.stop()
            
            # Parar sistema principal
            if self.system_manager:
                logger.info("üîß Parando sistema principal...")
                await self.system_manager.shutdown()
            
            logger.info("‚úÖ Shutdown conclu√≠do com sucesso!")
            
        except Exception as e:
            logger.error(f"‚ùå Erro durante shutdown: {e}")
    
    def _signal_handler(self, signum, frame):
        """
        Handler para sinais do sistema
        """
        logger.info(f"üõë Sinal {signum} recebido. Iniciando shutdown...")
        self.running = False
    
    def _validate_config(self, config: Dict[str, Any]) -> bool:
        """
        Valida configura√ß√µes cr√≠ticas
        
        Args:
            config: Configura√ß√µes carregadas
            
        Returns:
            bool: True se configura√ß√µes v√°lidas
        """
        required_sections = [
            'exchange', 'capital', 'risk_management', 
            'strategies', 'data', 'execution'
        ]
        
        for section in required_sections:
            if section not in config:
                logger.error(f"‚ùå Se√ß√£o obrigat√≥ria '{section}' n√£o encontrada!")
                return False
        
        # Validar configura√ß√µes da exchange
        exchange_config = config['exchange']
        if not exchange_config.get('api_key') or not exchange_config.get('api_secret'):
            logger.error("‚ùå API keys da Binance n√£o configuradas!")
            logger.info("üí° Configure suas chaves em config/config.yaml")
            return False
        
        # Validar capital inicial
        capital = config['capital'].get('initial_balance', 0)
        if capital <= 0:
            logger.error("‚ùå Capital inicial deve ser maior que zero!")
            return False
        
        return True
    
    def _print_startup_summary(self, config: Dict[str, Any]):
        """
        Imprime resumo da inicializa√ß√£o
        """
        print("\n" + "="*60)
        print("üöÄ BTC PERPETUAL ELITE TRADER")
        print("="*60)
        
        # Informa√ß√µes b√°sicas
        capital = config['capital']['initial_balance']
        testnet = config['exchange']['testnet']
        
        print(f"üí∞ Capital Inicial: ${capital:,.2f}")
        print(f"üåê Modo: {'TESTNET' if testnet else 'MAINNET'}")
        print(f"üìä Dashboard: http://localhost:{config.get('monitoring', {}).get('dashboard_port', 8080)}")
        
        # Estrat√©gias ativas
        print("\nüìà Estrat√©gias Ativas:")
        strategies = config.get('strategies', {})
        for name, strategy in strategies.items():
            if strategy.get('enabled', False):
                allocation = strategy.get('allocation', 0) * 100
                print(f"  ‚Ä¢ {name.replace('_', ' ').title()}: {allocation:.1f}%")
        
        # Configura√ß√µes de risco
        risk = config.get('risk_management', {})
        print(f"\n‚öñÔ∏è Gest√£o de Risco:")
        print(f"  ‚Ä¢ Risco M√°ximo: {risk.get('max_portfolio_risk', 0)*100:.1f}%")
        print(f"  ‚Ä¢ Drawdown M√°ximo: {risk.get('max_drawdown', 0)*100:.1f}%")
        print(f"  ‚Ä¢ Perda Di√°ria M√°xima: {risk.get('max_daily_loss', 0)*100:.1f}%")
        
        print("\n" + "="*60)
        print("‚úÖ Sistema pronto para trading!")
        print("="*60 + "\n")

def main():
    """
    Fun√ß√£o principal
    """
    parser = argparse.ArgumentParser(
        description="BTC Perpetual Elite Trader - Sistema de Trading Algor√≠tmico Avan√ßado"
    )
    
    parser.add_argument(
        "--config", 
        default="config/config.yaml",
        help="Caminho para arquivo de configura√ß√£o"
    )
    
    parser.add_argument(
        "--log-level",
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        help="N√≠vel de logging"
    )
    
    parser.add_argument(
        "--paper-trading",
        action="store_true",
        help="Executar em modo paper trading"
    )
    
    parser.add_argument(
        "--backtest",
        action="store_true",
        help="Executar backtesting ao inv√©s de trading ao vivo"
    )
    
    args = parser.parse_args()
    
    # Setup logging
    setup_logging(level=args.log_level)
    
    # Verificar se arquivo de configura√ß√£o existe
    if not os.path.exists(args.config):
        logger.error(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {args.config}")
        logger.info("üí° Copie config/config.example.yaml para config/config.yaml")
        sys.exit(1)
    
    # Criar e executar sistema
    trader = BTCPerpetualEliteTrader(args.config)
    
    try:
        # Executar sistema
        asyncio.run(trader.run())
    except KeyboardInterrupt:
        logger.info("üõë Sistema interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

